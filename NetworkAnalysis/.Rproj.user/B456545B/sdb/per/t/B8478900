{
    "collab_server" : "",
    "contents" : "#Final script for WGCNA clustering, followed by PCVA on each cluster\n#Written by MFA\n#WGCNA code adapted from tutorial\n#July 21, 2016\n\nsetwd('/Volumes/Rdrive/R/2015BPoil/Deepwater-Horizon-Oil-Spill-analyses/Final_ClusterPVCA/')\nlibrary(cluster)\nlibrary(pnmath0)\nlibrary(pvclust)\nlibrary(WGCNA)\n\n# The following setting is important, do not omit.\noptions(stringsAsFactors = FALSE)\n\n\n#This is normalized expression data from the BPoil microarray\n#All genes\nBPdata <- read.csv(\"medsummclean.csv\")\n\n#Tutorial code to get it into a dataframe\ndatExpr0 = as.data.frame(t(BPdata[, -c(1:1)]));\nnames(datExpr0) = BPdata$ProbeName;\nrownames(datExpr0) = names(BPdata)[-c(1:1)];\n\n# Check that all genes and samples have sufficiently low numbers of missing values.\ngsg = goodSamplesGenes(datExpr0, verbose = 3);\ngsg$allOK\n\n#=====================================================================================\n#\n#  Code chunk 4: remove bad genes\n#\n#=====================================================================================\n\n\nif (!gsg$allOK)\n{\n  # Optionally, print the gene and sample names that were removed:\n  if (sum(!gsg$goodGenes)>0) \n    printFlush(paste(\"Removing genes:\", paste(names(datExpr0)[!gsg$goodGenes], collapse = \", \")));\n  if (sum(!gsg$goodSamples)>0) \n    printFlush(paste(\"Removing samples:\", paste(rownames(datExpr0)[!gsg$goodSamples], collapse = \", \")));\n  # Remove the offending genes and samples from the data:\n  datExpr0 = datExpr0[gsg$goodSamples, gsg$goodGenes]\n}\n\n\n#=====================================================================================\n#\n#  Code chunk 5: heirarchal clustering\n#\n#=====================================================================================\n\n\nsampleTree = hclust(dist(datExpr0), method = \"average\");\n# Plot the sample tree: Open a graphic output window of size 12 by 9 inches\n# The user should change the dimensions if the window is too large or too small.\nsizeGrWindow(12,9)\n#pdf(file = \"Plots/sampleClustering.pdf\", width = 12, height = 9);\npar(cex = 0.6);\npar(mar = c(0,4,2,0))\nplot(sampleTree, main = \"Sample clustering to detect outliers\", sub=\"\", xlab=\"\", cex.lab = 1.5, \n     cex.axis = 1.5, cex.main = 2)\n\n#=====================================================================================\n#\n#  Code chunk 7: trait data\n#\n#=====================================================================================\n\ndatExpr = datExpr0\n\ntraitData = read.csv(\"BPoilTraits.csv\");\ndim(traitData)\nnames(traitData)\nallTraits = traitData\n# Form a data frame analogous to expression data that will hold the traits. \nfemaleSamples = rownames(datExpr);\ntraitRows = match(femaleSamples, allTraits$SamplePool);\ndatTraits = allTraits[traitRows, -1];\nrownames(datTraits) = allTraits[traitRows, 1];\n\ncollectGarbage();\n\n\n#=====================================================================================\n#\n#  Code chunk 8: cluster with colors\n#\n#=====================================================================================\n\n\n# Re-cluster samples\nsampleTree2 = hclust(dist(datExpr), method = \"average\")\n# Convert traits to a color representation: white means low, red means high, grey means missing entry\ntraitColors = numbers2colors(datTraits, signed = FALSE);\n# Plot the sample dendrogram and the colors underneath.\nplotDendroAndColors(sampleTree2, traitColors,\n                    groupLabels = names(datTraits), \n                    main = \"Hierarchical clustering of sample pools\")\n\n\n#=====================================================================================\n#\n#  Code chunk 9: save as Rdata\n#\n#=====================================================================================\n\n\nsave(datExpr, datTraits, file = \"AllGenes_InitialClustering_Cleanup.RData\")\n\n\n\n#=====================================================================================\n#\n#  Part II\n#\n#=====================================================================================\n\n#=====================================================================================\n#\n#  Code chunk 1\n#\n#=====================================================================================\n\n\n# Display the current working directory\ngetwd();\n# If necessary, change the path below to the directory where the data files are stored. \n# \".\" means current directory. On Windows use a forward slash / instead of the usual \\.\n#workingDir = \".\";\n#setwd(workingDir); \n# Load the WGCNA package\nlibrary(WGCNA)\n# The following setting is important, do not omit.\noptions(stringsAsFactors = FALSE);\n# Allow multi-threading within WGCNA. This helps speed up certain calculations.\n# At present this call is necessary for the code to work.\n# Any error here may be ignored but you may want to update WGCNA if you see one.\n# Caution: skip this line if you run RStudio or other third-party R environments. \n# See note above.\n#enableWGCNAThreads()\n# Load the data saved in the first part\nlnames = load(file = \"AllGenes_InitialClustering_Cleanup.RData\");\n#The variable lnames contains the names of loaded variables.\nlnames\n\n\n#=====================================================================================\n#\n#  Code chunk 2: Building/plotting the network\n#\n#=====================================================================================\n\n\n# Choose a set of soft-thresholding powers\npowers = c(c(1:10), seq(from = 12, to=20, by=2))\n# Call the network topology analysis function\nsft = pickSoftThreshold(datExpr, powerVector = powers, verbose = 5)\n# Plot the results:\nsizeGrWindow(9, 5)\npar(mfrow = c(1,2));\ncex1 = 0.9;\n# Scale-free topology fit index as a function of the soft-thresholding power\nplot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],\n     xlab=\"Soft Threshold (power)\",ylab=\"Scale Free Topology Model Fit,signed R^2\",type=\"n\",\n     main = paste(\"Scale independence\"));\ntext(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],\n     labels=powers,cex=cex1,col=\"red\");\n# this line corresponds to using an R^2 cut-off of h\nabline(h=0.90,col=\"red\")\n# Mean connectivity as a function of the soft-thresholding power\nplot(sft$fitIndices[,1], sft$fitIndices[,5],\n     xlab=\"Soft Threshold (power)\",ylab=\"Mean Connectivity\", type=\"n\",\n     main = paste(\"Mean connectivity\"))\ntext(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col=\"red\")\n\n\n#=====================================================================================\n#\n#  Code chunk 3: auto construction of network\n#\n#=====================================================================================\n\n#maxBlockSize adjusted for 16gb RAM\n\nnet = blockwiseModules(datExpr, power = 6,\n                       TOMType = \"unsigned\", minModuleSize = 30,\n                       reassignThreshold = 0, mergeCutHeight = 0.25,\n                       numericLabels = TRUE, pamRespectsDendro = FALSE,\n                       saveTOMs = TRUE,\n                       saveTOMFileBase = \"femaleMouseTOM\", \n                       verbose = 3,\n                       maxBlockSize=20000)\n\n\n\n\n#=====================================================================================\n#\n#  Code chunk 4: Plot cluster dendrogram\n#\n#=====================================================================================\n\n\n# open a graphics window\nsizeGrWindow(12, 9)\n# Convert labels to colors for plotting\nmergedColors = labels2colors(net$colors)\n# Plot the dendrogram and the module colors underneath\nplotDendroAndColors(net$dendrograms[[1]], mergedColors[net$blockGenes[[1]]],\n                    \"Module colors\",\n                    dendroLabels = FALSE, hang = 0.03,\n                    addGuide = TRUE, guideHang = 0.05)\n\n#=====================================================================================\n#\n#  Code chunk 5: \n#\n#=====================================================================================\n\n\nmoduleLabels = net$colors\nmoduleColors = labels2colors(net$colors)\nMEs = net$MEs;\ngeneTree = net$dendrograms[[1]];\nsave(MEs, moduleLabels, moduleColors, geneTree, \n     file = \"BPoil_autocluster.RData\")\n\n\n#=====================================================================================\n#=====================================================================================\n#     Phenotypic correlations\n#=====================================================================================\n#=====================================================================================\n\n\n\n\n\n\n\n#=====================================================================================\n#\n#  Code chunk 2\n#\n#=====================================================================================\n\n\n# Define numbers of genes and samples\nnGenes = ncol(datExpr);\nnSamples = nrow(datExpr);\n# Recalculate MEs with color labels\nMEs0 = moduleEigengenes(datExpr, moduleColors)$eigengenes\nMEs = orderMEs(MEs0)\nmoduleTraitCor = cor(MEs, datTraits, use = \"p\");\nmoduleTraitPvalue = corPvalueStudent(moduleTraitCor, nSamples);\n\n\n#=====================================================================================\n#\n#  Code chunk 3 - not needed\n#\n#=====================================================================================\n\n\nsizeGrWindow(10,6)\n# Will display correlations and their p-values\ntextMatrix =  paste(signif(moduleTraitCor, 2), \"\\n(\",\n                    signif(moduleTraitPvalue, 1), \")\", sep = \"\");\ndim(textMatrix) = dim(moduleTraitCor)\npar(mar = c(6, 8.5, 3, 3));\n# Display the correlation values within a heatmap plot\nlabeledHeatmap(Matrix = moduleTraitCor,\n               xLabels = names(datTraits),\n               yLabels = names(MEs),\n               ySymbols = names(MEs),\n               colorLabels = FALSE,\n               colors = blueWhiteRed(50),\n               textMatrix = textMatrix,\n               setStdMargins = FALSE,\n               cex.text = 0.5,\n               zlim = c(-1,1),\n               main = paste(\"Module-trait relationships\"))\n\n\n#=====================================================================================\n#\n#  Code chunk 4\n#\n#=====================================================================================\n\n\n# Define variable OIL containing the weight column of datTrait\nweight = as.data.frame(datTraits$Treatment);\nnames(weight) = \"Treatment\"\n# names (colors) of the modules\nmodNames = substring(names(MEs), 3)\n\ngeneModuleMembership = as.data.frame(cor(datExpr, MEs, use = \"p\"));\nMMPvalue = as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership), nSamples));\n\nnames(geneModuleMembership) = paste(\"MM\", modNames, sep=\"\");\nnames(MMPvalue) = paste(\"p.MM\", modNames, sep=\"\");\n\ngeneTraitSignificance = as.data.frame(cor(datExpr, weight, use = \"p\"));\nGSPvalue = as.data.frame(corPvalueStudent(as.matrix(geneTraitSignificance), nSamples));\n\nnames(geneTraitSignificance) = paste(\"GS.\", names(weight), sep=\"\");\nnames(GSPvalue) = paste(\"p.GS.\", names(weight), sep=\"\");\n\n\n#=====================================================================================\n#\n#  Code chunk 5: defining gene modules. this example uses brown, but you should change as needed\n#\n#=====================================================================================\n\n###CHANGE MODULE HERE AS NEEDED\n#Sig fits for treatment: lightyellow*, tan**, magenta**, purple**, brown**, red**, yellow**, \n#Sig fits for state: turquoise*, green***, \nmodule = \"purple\"\ncolumn = match(module, modNames);\nmoduleGenes = moduleColors==module;\n\nsizeGrWindow(7, 7);\npar(mfrow = c(1,1));\nverboseScatterplot(abs(geneModuleMembership[moduleGenes, column]),\n                   abs(geneTraitSignificance[moduleGenes, 1]),\n                   xlab = paste(\"Module Membership in\", module, \"module\"),\n                   ylab = \"Gene significance for treatment\",\n                   main = paste(\"Module membership vs. gene significance\\n\"),\n                   cex.main = 1.2, cex.lab = 1.2, cex.axis = 1.2, col = module)\n\n\n#=====================================================================================\n#\n#  Code chunk 6\n#\n#=====================================================================================\n\n\nnames(datExpr)\n\n\n#=====================================================================================\n#\n#  Code chunk 7\n#\n#=====================================================================================\n\n#Changed to turq\nnames(datExpr)[moduleColors==\"turquoise\"]\n\n\n#=====================================================================================\n#\n#  Code chunk 8: loading annotations\n#\n#=====================================================================================\n\n\nannot = read.csv(file = \"GeneAnnotation.csv\");\ndim(annot)\nnames(annot)\nprobes = names(datExpr)\nprobes2annot = match(probes, annot$ProbeName)\n# The following is the number or probes without annotation:\nsum(is.na(probes2annot))\n# Should return 0.\n#Jk not in our data! We have a few.\n\n\n#=====================================================================================\n#\n#  Code chunk 9: Ordering data and creating a giant table\n#\n#=====================================================================================\n\n\n# Create the starting data frame\ngeneInfo0 = data.frame(ProbeName = probes,\n                       geneSymbol = annot$TargetID[probes2annot],\n                       LocusLinkID = annot$AT[probes2annot],\n                       moduleColor = moduleColors,\n                       geneTraitSignificance,\n                       GSPvalue)\n# Order modules by their significance for weight OR WHATEVER TRAIT YOU CHOSE\nmodOrder = order(-abs(cor(MEs, weight, use = \"p\")));\n# Add module membership information in the chosen order\nfor (mod in 1:ncol(geneModuleMembership))\n{\n  oldNames = names(geneInfo0)\n  geneInfo0 = data.frame(geneInfo0, geneModuleMembership[, modOrder[mod]], \n                         MMPvalue[, modOrder[mod]]);\n  names(geneInfo0) = c(oldNames, paste(\"MM.\", modNames[modOrder[mod]], sep=\"\"),\n                       paste(\"p.MM.\", modNames[modOrder[mod]], sep=\"\"))\n}\n# Order the genes in the geneInfo variable first by module color, then by geneTraitSignificance\ngeneOrder = order(geneInfo0$moduleColor, -abs(geneInfo0$GS.Treatment));\ngeneInfo = geneInfo0[geneOrder, ]\n\n\n#=====================================================================================\n#\n#  Code chunk 10\n#\n#=====================================================================================\n\n#change filename as needed\nwrite.csv(geneInfo, file = \"geneInfo_AllGenes.csv\")\n\n\n\n#=====================================================================================\n#=====================================================================================\n#=====================================================================================\n#        PVCA\n#=====================================================================================\n#=====================================================================================\n#=====================================================================================\n\n#impute missing values\n\nlibrary(impute)\nProbeNames <- BPdata$ProbeName\ndfclean<-as.matrix(BPdata[,2:19])\nif (any(is.na(dfclean)))\n  df_imp <- impute.knn(dfclean[])$data\ndf_imp<-data.frame(df_imp)\ndf_imp$ProbeName<-ProbeNames\n\n\n#merge BPdata and mod memberships\n\nMergedDataset <- merge(df_imp, geneInfo, \"ProbeName\")\nMergedDataset <- MergedDataset[,1:22]\n\nwrite.csv(MergedDataset, \"MergedDataSet.csv\", row.names=FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\n###### Can start here\n\n\n\n\n\n\n\n\n\nMergedDataset<- read.csv(\"MergedDataSet.csv\", header=TRUE)\n\n#create color names string\nModuleNames<-unique(MergedDataset$moduleColor)\n\n#load libraries\nlibrary(Biobase)\nlibrary(pvca)\n\npData = read.table(\"BPoilTraits.csv\",row.names=1, header=TRUE, sep=\",\")\nsapply(pData,class)\n\nmetadata <- data.frame(labelDescription=c(\"Oil exposure, 1\", \"Field plot\", \"Which State\"),\n                       rownames=c(\"Treatment\", \"Population\", \"State\"))\nphenoData = new(\"AnnotatedDataFrame\", data=pData, varMetadata=metadata)\nphenoData\n\ngetPVCA <- function(x) {\n  #Get each color from the input\n  x <- MergedDataset[ which(MergedDataset$moduleColor==x), ]\n  x <- x[,2:19]\n  exprs <- as.matrix(x)\n  CADset <- ExpressionSet(assayData=exprs, phenoData=phenoData)\n  pct_threshold = 0.7\n  batch.factors <- c(\"Population\", \"State\", \"Treatment\")\n  pvcaObj <- pvcaBatchAssess(CADset, batch.factors, pct_threshold)\n  return(pvcaObj)\n}\n\nModuleNames\n\nplotPVCA <- function(x) {\n  thiscluster<-x\n  pvcaObj<-getPVCA(thiscluster)\n  pdf(paste(x, \"PVCA.pdf\", sep=\"\"),width=10,height=10)\n  bp <- barplot(pvcaObj$dat,\n                ylab = \"Weighted average proportion variance\", ylim= c(0,1.1),\n                col = c(\"blue\"), las=2, main=paste(x,\"PVCA estimation bar chart\", sep=\" \"))\n  \n  axis(1, at = bp, labels = pvcaObj$label, xlab = \"Effects\", cex.axis = 0.5, las=2)\n  values = pvcaObj$dat\n  new_values = round(values , 2)\n  text(bp,pvcaObj$dat,labels = new_values, pos=3, cex = 0.8)\n  dev.off()\n}\n\n\n\nlength(ModuleNames)\n\nplotPVCA(\"black\")\nplotPVCA(\"green\")\nplotPVCA(\"yellow\")\nplotPVCA(\"greenyellow\")\nplotPVCA(\"turquoise\")\nplotPVCA(\"red\")\nplotPVCA(\"blue\")\nplotPVCA(\"salmon\")\nplotPVCA(\"brown\")\nplotPVCA(\"purple\")\nplotPVCA(\"magenta\")\nplotPVCA(\"cyan\")\nplotPVCA(\"midnightblue\")\nplotPVCA(\"pink\")\nplotPVCA(\"tan\")\nplotPVCA(\"lightcyan\")\nplotPVCA(\"grey\")\nplotPVCA(\"grey60\")\nplotPVCA(\"royalblue\")\nplotPVCA(\"lightyellow\")\nplotPVCA(\"lightgreen\")\nplotPVCA(\"darkgreen\")\nplotPVCA(\"darkred\")\n\n\n\n\n\n\n\n\n\n#=====================================================================================\n#=====================================================================================\n#=====================================================================================\n#       Generalized linear models for eigengenes\n#=====================================================================================\n#=====================================================================================\n#=====================================================================================\n\n\n\nEigens<-MEs\nNames<-colnames(Eigens)\nEigens$SamplePool<-allTraits$SamplePool\nEigens<-merge(Eigens, allTraits, by=\"SamplePool\")\n\nlibrary(lme4)\nlibrary(nlme)\nlibrary(car)\nlibrary(MASS)\nlibrary(lmerTest)\n\nhist(Eigens$MEdarkgreen)\n\n\ngetGLMs <- function(x) {\n  formula = \"~ Treatment + State + Treatment:(1|Population)\"\n  #ME.fit=lmer(Eigens[,c(\"x\")] ~ Treatment*State + Treatment:(1|Population), data=Eigens)\n  ME.fit=lmer(formula(paste(x, formula)), data=Eigens)\n  A=summary(ME.fit)\n  cat(\"\\n\\n\", file = paste(\"EigenFit_\", x, \".txt\", sep=\"\"), append = TRUE)\n  # export anova test output\n  cat(c(paste(x),\"Summary\\n\"), file = paste(\"EigenFit_\", x, \".txt\", sep=\"\"), append = TRUE)\n  capture.output(A, file = paste(\"EigenFit_\", x, \".txt\", sep=\"\"), append = TRUE)\n  B=Anova(ME.fit)\n  cat(\"\\n\\n\", file = paste(\"EigenFit_\", x, \".txt\", sep=\"\"), append = TRUE)\n  cat(c(paste(x),\"ANOVA\\n\"), file = paste(\"EigenFit_\", x, \".txt\", sep=\"\"), append = TRUE)\n  capture.output(B, file = paste(\"EigenFit_\", x, \".txt\", sep=\"\"), append = TRUE)\n}\n\n\ngetGLMs(\"MEblack\")\ngetGLMs(\"MEgreen\")\ngetGLMs(\"MEyellow\")\ngetGLMs(\"MEgreenyellow\")\ngetGLMs(\"MEturquoise\")\ngetGLMs(\"MEred\")\ngetGLMs(\"MEblue\")\ngetGLMs(\"MEsalmon\")\ngetGLMs(\"MEbrown\")\ngetGLMs(\"MEpurple\")\ngetGLMs(\"MEmagenta\")\ngetGLMs(\"MEcyan\")\ngetGLMs(\"MEmidnightblue\")\ngetGLMs(\"MEpink\")\ngetGLMs(\"MEtan\")\ngetGLMs(\"MElightcyan\")\ngetGLMs(\"MEgrey\")\ngetGLMs(\"MEgrey60\")\ngetGLMs(\"MEroyalblue\")\ngetGLMs(\"MElightyellow\")\ngetGLMs(\"MElightgreen\")\ngetGLMs(\"MEdarkgreen\")\ngetGLMs(\"MEdarkred\")\n\n#Sig fits for treatment: lightyellow*, tan**, magenta**, purple**, brown**, red**, yellow**, \n#Sig fits for state: turquoise*, green***, \n\n\n\n\n\n#=====================================================================================\n#=====================================================================================\n#=====================================================================================\n#        Network visualization using WGCNA functions\n#=====================================================================================\n#=====================================================================================\n#=====================================================================================\n\n#COMPUTATIONALLY INTENSIVE - erase all other variable besides datExpr before attempting\nrm(list= ls()[!(ls() %in% c('datExpr','geneTree', 'moduleColors', 'datTraits'))])\n\n#=====================================================================================\n#\n#  Code chunk 2\n#\n#=====================================================================================\n\n\n# Calculate topological overlap anew: this could be done more efficiently by saving the TOM\n# calculated during module detection, but let us do it again here.\n#dissTOM = 1-TOMsimilarityFromExpr(datExpr, power = 6);\n#dissTOM = \"\"\n# Transform dissTOM with a power to make moderately strong connections more visible in the heatmap\n#plotTOM = dissTOM^7;\n#save(plotTOM, file = \"plotTom.RData\")\nload(\"plotTom.RData\")\n# Set diagonal to NA for a nicer plot\ndiag(plotTOM) = NA;\n# Call the plot function\nsizeGrWindow(9,9)\nTOMplot(plotTOM, geneTree, moduleColors, main = \"Network heatmap plot, all genes\")\n\n##### EIGENGENE NETWORK\n\n# Recalculate module eigengenes\nMEs = moduleEigengenes(datExpr, moduleColors)$eigengenes\n# Isolate treatment from the  traits\ntreatment = as.data.frame(datTraits$Treatment);\nnames(treatment) = \"treatment\"\n# Add the weight to existing module eigengenes\nMET = orderMEs(cbind(MEs, treatment))\n# Plot the relationships among the eigengenes and the trait\nsizeGrWindow(5,7.5);\npar(cex = 0.9)\nplotEigengeneNetworks(MET, \"\", marDendro = c(0,4,1,2), marHeatmap = c(3,4,1,2), cex.lab = 0.8, xLabelsAngle\n                      = 90)\n\n\n#=====================================================================================\n#\n#  Code chunk 5\n#\n#=====================================================================================\n\n\n# Plot the dendrogram\nsizeGrWindow(6,6);\npar(cex = 1.0)\nplotEigengeneNetworks(MET, \"Eigengene dendrogram\", marDendro = c(0,4,2,0),\n                      plotHeatmaps = FALSE)\n# Plot the heatmap matrix (note: this plot will overwrite the dendrogram plot)\npar(cex = 1.0)\nplotEigengeneNetworks(MET, \"Eigengene adjacency heatmap\", marHeatmap = c(3,4,2,2),\n                      plotDendrograms = FALSE, xLabelsAngle = 90)\n\n\n\n\n\n\n#### CYTOSCAPE EXPORT\n\n#=====================================================================================\n#\n#  Code chunk 4\n#\n#=====================================================================================\n\n#Sig fits for treatment: lightyellow*, tan**, magenta**, purple**, brown**, red**, yellow**, \n#Sig fits for state: turquoise*, green***, \n\n# Recalculate topological overlap if needed\nTOM = TOMsimilarityFromExpr(datExpr, power = 6);\n# Read in the annotation file\nannot = read.csv(file = \"GeneAnnotation.csv\");\n# Select modules\nmodules = c(\"lightyellow\", \"tan\", \"magenta\", \"purple\", \"brown\", \"red\", \"yellow\");\n# Select module probes\nprobes = names(datExpr)\ninModule = is.finite(match(moduleColors, modules));\nmodProbes = probes[inModule];\nmodGenes = annot$gene_symbol[match(modProbes, annot$substanceBXH)];\n# Select the corresponding Topological Overlap\nmodTOM = TOM[inModule, inModule];\ndimnames(modTOM) = list(modProbes, modProbes)\n# Export the network into edge and node list files Cytoscape can read\ncyt = exportNetworkToCytoscape(modTOM,\n                               edgeFile = paste(\"CytoscapeInput-edges-\", paste(modules, collapse=\"-\"), \".txt\", sep=\"\"),\n                               nodeFile = paste(\"CytoscapeInput-nodes-\", paste(modules, collapse=\"-\"), \".txt\", sep=\"\"),\n                               weighted = TRUE,\n                               threshold = 0.02,\n                               nodeNames = modProbes,\n                               altNodeNames = modGenes,\n                               nodeAttr = moduleColors[inModule]);\n\n\n",
    "created" : 1475000883170.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3430570891",
    "id" : "B8478900",
    "lastKnownWriteTime" : 1475014590,
    "last_content_update" : 1475014590003,
    "path" : "/Volumes/Rdrive/R/2015BPoil/Deepwater-Horizon-Oil-Spill-analyses/Final_ClusterPVCA/OneStepClusterPVCA.R",
    "project_path" : "OneStepClusterPVCA.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}